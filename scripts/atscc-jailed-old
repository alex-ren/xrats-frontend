#!/usr/bin/perl -wT

# Notes on chroot setup
# apt-get install dchroot debootstrap
# mkdir /opt/atscc-jail
#
# Add the following to /etc/schroot.conf
#  [natty]
#  description=Ubuntu Natty
#  location=/opt/atscc-jail
#  priority=3
#  users=atscc
#  groups=sbuild
#  root-groups=root
# 
# sudo debootstrap --variant=buildd --arch i386 natty /opt/atscc-jail http://mirror.anl.gov/pub/ubuntu/
# cp -r /opt/ats-0.2.7 /opt/atscc-jail/opt/ats-0.2.7
# cp -r /opt/postiats /opt/atscc-jail/opt/postiats
# cp lib/safe-exec /opt/atscc-jail/opt/
#
# Install gcc and binutils for avr and set /usr/local/lib in /etc/ld.so.conf, then run ldconfig

use POSIX;
use BSD::Resource;
use String::Random;
use IO::Handle;
use Getopt::Long;
use JSON;

$chroot_jail = "/opt/atscc-jail";

setrlimit(RLIMIT_CPU,1,2);
setrlimit(RLIMIT_CORE,0,0);
setrlimit(RLIMIT_LOCKS,0,0);
setrlimit(RLIMIT_NOFILE,50,50);
setrlimit(RLIMIT_OFILE,50,50);
setrlimit(RLIMIT_OPEN_MAX,50,50);
setrlimit(RLIMIT_FSIZE,100000,150000);

setpriority(PRIO_PROCESS,PRIO_MAX);

($_,$_,$uid,$gid) = getpwnam("nobody")
    or die "failed getting user nobody";

if($gid == 0 || $uid == 0) { #Oh my god, how did you become root?!
    die "gid and uid not set";
}

#Put the process in jail and drop permissions.
chdir($chroot_jail);
chroot($chroot_jail) or die "Trying\n";

$< = $uid;
$> = $uid;
$( = $gid;
$) = $gid; 

sub file_of_string {
    local($filename, $content) = ($_[0], $_[1]);
    open(SOURCE,"+>","/tmp/".$filename)
	or die "Cannot create tmp file";
    print SOURCE $content;
    close(SOURCE);
}
 
sub random_string {
    $rand = new String::Random;
    return $rand->randpattern("CnccCcCCncnCcnncCcnCnCcCnCnC");
}

# fork and exec a command, only displaying errors if it exits with 
# a non-zero status.
sub fork_exec_err {
    @cmd = @_;
    pipe CCRD, CCWR;
    
    $pid = fork();
    die "Couldn't fork" unless defined $pid;
    if ( $pid > 0 ) {
        close(CCWR);
        wait();
    } else {
        close(CCRD);
        open(STDERR, ">&CCWR");
        open(STDOUT, ">", "/dev/null");
        exec { $cmd[0] } @cmd or die "Couldn't run compiler..";
    }
    $success = !$?;

    if(!$success) {
        print "Error:\n";
        while($line = <CCRD>) {
            print $line;
        }
    }
    return $success;
}

sub compile {
	local($options, $args) = ($_[0], $_[1]);
	$filename = random_string();

	file_of_string($filename.".dats", $args->{"input"});

	#All the files we'll work with (mostly)
        @files = ("$filename.dats", $filename."_dats.c", $filename);

	while ( ($key, $value) = each( %{ $options->{"env"} } ) ) {
		$ENV{$key} = $value;
	}

	$fmt = $options->{"compiler_fmt"};
	$fmt =~ s/__filename__/$filename/g;
	
	chdir("/tmp");
	
	@compile_cmd = ($options->{"path"});
	push @compile_cmd, split(" ", $fmt);
	push @compile_cmd, @{$options->{"compile_flags"}};
        
	#fork and exec
	$success = fork_exec_err(@compile_cmd);
		
	if($success) {
		if($options->{"typecheck"}) {
			print "Your code has been successfully typechecked!"; 
		} elsif ($options->{"run"}) {
			#Make sure we can't write to these files.
            		chmod 0555, @files;
	    		alarm 2;
            		setrlimit(RLIMIT_STACK,8048576,8048576);
            		setrlimit(RLIMIT_VMEM,16048576,16048576);
            		@run_cmd = ("/opt/safe-exec");
            		push @run_cmd , "/tmp/$filename";
            		push @run_cmd, @{$options->{"runtime_flags"}};
            		system @run_cmd;
            		chdir("/tmp");
            		chmod 0755, @files; 
		} elsif ($options->{"save"} ) {
			print $filename;
		} else {
			print "Your code has been successfully compiled!\n";
		}
	}
	return $success, @files;
}

%compilers = ("ats"=>
              {"options"=>
               {"path"=>"/opt/ats-0.2.7/bin/atscc","compile_flags"=>[],"runtime_flags"=>[],
		"env" => {
			"ATSHOME"=>"/opt/ats-0.2.7",
			"ATSHOMERELOC"=>"ATS-0.2.8"
		},
		"compiler_fmt" => " -o __filename__ __filename__.dats"
		}
              },
	      "avrats"=> {
		"options"=> {
				"path"=> "/opt/ats-0.2.7/bin/avr-atscc", 
				"compile_flags"=> ["-h","-mmcu=atmega328p","-DF_CPU=16000000UL"],
				"runtime_flags"=> [],
				"env" => {
					"ATSHOME"=>"/opt/ats-0.2.7",
					"ATSHOMERELOC"=>"ATS-0.2.8"
				},
				"compiler_fmt" => " -o __filename__ __filename__.dats"
			}
		},
              "patsopt"=>
              {"options"=>
              {"path"=>"/opt/postiats/bin/patsopt","compile_flags"=>[],"runtime_flags"=>[],
	       "env" => {
			"PATSHOME"=>"/opt/postiats"
		},
		"compiler_fmt" => "--dynamic __filename__"
	      	}
              });

#Collect the serialized input.
$input = "";
while(<STDIN>) {
    $input .= $_;
}

$args = JSON->new->utf8->space_after->decode($input);

die "Invalid compiler given" unless $compiler = $compilers{ $args->{"compiler"} };

$options = $compiler->{"options"};

$ENV{'PATH'} = "/usr/local/avr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin";

print `pwd`;

$action = $args->{"action"};

if( $action eq "typecheck" ) {

    push @{$options->{"compile_flags"}}, "-tc";
    $options->{"typecheck"} = 1;

} else {

    foreach $flag (@{$args->{"compile_flags"}}) {
        #Define a valid flag.
        if ( $flag =~ m/([A-Za-z0-9\-]+)/ ) {
             push @{$options->{"compile_flags"}}, $1;
        }
    }

    foreach $flag (@{$args->{"runtime_flags"}}) {
       #The user can give whatever they want to their program.
	if( $flag =~ m/(.*)/ ) {
	     push @{ $options->{"runtime_flags"} }, $1;
        }
    }


    $options->{"run"} = ($action eq "run") ? 1 : 0;
    $options->{"save"} = ($args->{"save"}) ? 1 : 0;
}

($success, @files) = compile($options, $args);

chdir("/tmp");

unlink @files unless $options->{"save"};

exit(!$success);
