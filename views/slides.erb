<div class="slide nocode">
<h2>Welcome to ATS</h2>

<p>ATS is a new language that introduces a style of programming with
theorem proving. Since it's new, it can be a pretty challenging to learn but
doing so will inevitably make you a better programmer.</p>

<p>This tutorial is meant as an informal guide to getting your feet wet with ATS
without going to the trouble or entertainment of bootstrapping the compiler yourself.
For a more complete reference, see Hongwei Xi's book,
<a href="http://www.ats-lang.org/DOCUMENT/INTPROGINATS/HTML/book1.html" target="blank">Introduction to Programming in ATS</a></p>

<p>For a more succinct reference, check out the <a href="http://en.wikipedia.org/wiki/ATS_(programming_language)" target="_blank">
ATS Wikipedia Page</a>.</p>

<p>This guide starts off with an overview of functional programming in ATS, followed
by a description of using dependent types with theorem proving, and finally an
introduction to linear types. The tutorial assumes you have no experience with any of
these topics.</p>

<p>Some slides will have exercises so you can gain experience coming up with 
solutions in ATS on your own. A solution to any of them can probably be found 
in Professor Xi's book, just in case you get stuck.</p>
</div>

<div class="slide">
<h2>Hello World!</h2>
<p>As with every language, we start with Hello World.</p>

<p>You'll notice that the editor has a few options to choose from 
for running your code. One of ATS' best qualities is a type checker that 
allows you to check constraints in your code without compiling it. This can be
very useful as you can start with nothing but an abstract interface and build
the higher level logic of your application.
</p>

<p>With this approach, you will find most of your debugging 
will be spent trying to please the typechecker, and less time tracking down
bugs in gdb.</p>

<p>With hello world, there isn't much to check so we can
quickly compile and run our code. The compile option tells ATS to compile your code
down to C and then use gcc to produce an executable.</p>

<p>If you really get lost in the weeds, just choose the reset option and
you can start over.</p>
<div>
implement main () = println! "Hello World!"
</div>
</div>

<div class="slide">
     <h2>A Quick Aside</h2>
     <p>ATS is a feature rich language and its syntax differs greatly from
     other languages. The following note on negation will help out later. Also,
     when checking for equality we only use one equal sign.</p>
     <p>This may seem overly trivial, but when I first learned ATS
     these little things always tripped me up.</p>
<div>
implement main () = let
    val () = println! 5
    val () = println! ~5 //negation
    val equal = 5 = ~5   //equality
    in
      if ~equal then 
        println!("5 doesn't equal -5")
    end
</div>
</div>

<div class="slide">
<h2>Fibonacci</h2>
<p>Here's a slow way of finding the nth
Fibonacci number. The first thing to notice about ATS is that is 
a call by value functional programming language and a good deal of its
syntax comes from ML.</p>

<p>fib gives a good example of how to define a function in ATS. Every
parameter must have a name and a type associated with it. After the argument
list, we provide the type of the function's result.</p>

<p>Of course, you can define function interfaces that are to be implemented later.
In ATS, we identify these with the "extern" qualifier. When we go to implement 
the function, we use "implement".</p>

<p>There are several ways to comment code in ATS. The (* *) pair comments out a 
region of text, and allows comments to be nested. Regular // C style comments are 
supported as well. You can also use //// to comment out all the remaining lines in 
a file.</p>

<h3>Conditional Expressions</h3>
<p>Conditonals follow an "if condition then result else result" pattern. Omitting an else case will 
cause a void type to be returned for the statement if the condition is false.</p>

<h2>Exercise</h2>
<p>Implement the fact interface given in the example. Then, try it out 
by uncommenting the call to it in main.</p>
<div>

fun fib (n:int) : int = 
    if n < 2 then n
    else
        fib(n-1) + fib(n-2)

(* fact - compute n factorial - n! *)
extern
fun fact (n:int) : int

// implement fact (n) = 

implement main () = 
    begin
        println! ("F(10) = ", fib(10));
        //println! ("10! = ", fact(10));
    end

////
All of this will be ignored...
</div>
</div>

<div class="slide">
<h2>Booleans</h2>
<p>The standard || and && boolean operators work in ATS. As mentioned earlier, 
the ~ operator specifies negation.</p>
<div>
implement main () =
  let
    val p = true
    val q = false
    val a = p && q
    val b = p || q
    val res =  ~(a || b)
  in
    begin
      println! ("p = ", p);
      println! ("q = ", q);
      println! ("¬( (p ∧ q) ∨ (p ∨ q) ) = ", res);
    end
  end
</div>
</div>

<div class="slide">
<h2>Variable Scope</h2>
<p>In the previous examples, you saw the "let" construct. This allows us to
define values in specific contexts. As you can see, variables have scope in a
let expression from when they are defined and the expression inside "in end".
For values defined outside any function, they have global scope.</p>

<p>
Keep in mind that vals aren't like global variables. For this example, 
I can read the value of x in any scope I want, but I cannot change its 
value for any scope above my current one.
</p>

<p>It's important to understand that when you use val, you're doing pattern
matching on the evaluated expression. If you provide a constructor that does
not match the type of a value, then the typechecker will complain.</p>

<p>For example, the println! function we've been using returns a void type, 
so we use the void constructor, (), to capture its value.</p>

<p>val is useful for unpacking simple data structures and binding values to 
variables, but sometimes we need to do pattern matching against values 
that can take on multiple constructors. Before we talk about such data 
types, lets go over the basics of control flow and looping in ATS.</p>
<div>
val x = "I have global scope!"

fun display_x () : void = 
	println!("global x is = ", x)

implement main () = 
   let
       val () = println! x
       val y = 45 //binds the value of 45 to y
       val _ = 10 //undscore matches all types
   in
       if y > 30 then 
         let
            val x = 10
            val z = 15
          in 
            begin
                println! ("y+z = ", y+z);
                println! ("x = ", x);
                display_x();
            end
        end (* z is now out of scope *)
   end (* y is now out of scope *)
</div>
</div>

<div class="slide">
<h2>begin / end</h2>
<p>begin end expressions are useful for momentarily switching
to an imperative style. Sometime this makes sense, especially for
performing I/O. Every expression in a begin end expression must 
return a void type and end with an semi-colon just like in C.</p>

<p>In this example we show that begin end expressions are simply
syntactic sugar for let expressions consisting entirely of void
values.</p>

<div>
val quote1 = "Happy Thanksgivin' Pilgrims"
val quote2 = "I'm John Wayne."

val use_let = false

implement main () =
   if use_let then
      let
        val () = println! quote1
        val () = println! quote2
      in end
   else
      begin
        println! quote1;
        println! quote2;
      end
</div>
</div>

<div class="slide">
<h2>Where Blocks</h2>
<p>Where blocks are handy for using values and
defining them after they are used. You can
think of them as reverse let expressions where
you first provide a context and then bind values
to it.</p>
<div>
implement main () = 
    println! ( area(w,h) ) where {
        val w = 10
        val h = 20
        fun area(x:int, y:int) : int = x * y
    }
</div>
</div>

<div class="slide">
<h2>For Loops</h2>

<p>While ATS does have for and while loops, the preferred style
is to use tail recursion whenever possible. The main idea behind
tail recursion is to accumulate the result of a recursive function
in the parameters so that the compiler can optimize out the
recursive calls with jumps. This may seem ludicrous; we are avoiding
imperative style so that the compiled code will be imperative anyway.</p>

<p>Aside from recursive functions being more expressive, doing things
this way will provide enormous value when we start using the
type system to verify properties of our functions.</p>

<p>For now, here's an example of the popular
<a href="http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html"
target="blank">fizz buzz problem.</a></p>

<p>As you can see, ATS allows you to define functions within let expressions. 
We'll go over this more later, but for now this should suffice for most loops
in simple programs.</p>

<p>This pattern is similar to a basic for loop you would find in a more 
imperative language. In fact, here's how the ATS compiler could interpret 
this loop.
<code>
<pre>
int i, max;
max = 100;
for(i = 1; i <= max; i++) {
    if i % 3 == 0
       printf("fizz\n");
    if i % 5 == 0
       printf("buzz\n");
    if i % 3 && i % 5
       printf("%d\n",i);
}
</pre>
</code>

</p>
<div>
fun fizzbuzz () : void = let
    fun loop (i:int, max:int) : void = 
        if i <= max then let
           val () = if (i mod 3) = 0 then 
                       println! "fizz"
           val () = if (i mod 5) = 0 then
                       println! "buzz"
           val () = if (i mod 3) != 0 &&
                       (i mod 5) != 0 then
                       println! i
           in
             loop(i+1,max)
           end
        else ()
    in loop(1,100) end

implement main () = fizzbuzz()
</div>
</div>

<div class="slide">

<h2>While Loops</h2>
<p>While loops are even easier to abstract to recursion than for loops. In
this example, we wait for a condition to be true.</p>

<p>We also make use of a random number interface provided by the C library.
staload allows us to access interfaces defined in other files, and when we follow
the call with a name, we put all the functions defined in that file within a
namespace.</p>

<p>You can check out the functions defined in random.sats
<a href="http://xrats.illtyped.com/ats/ats028/libc/SATS/random.sats"
   target="_blank">here</a>.
</p>

<div>
staload Rand = "libc/SATS/random.sats"

implement main () =
    let
      // access a function in a namespace
      val () = $Rand.srand48_with_time()

      fun loop () : void = let
          val res = $Rand.drand48() < 0.5
       in 
          if res then
             println! "Finished!"
          else
             loop()
       end
    in 
       loop()
    end
</div>
</div>

<div class="slide">
<h2>Faster Fibonacci</h2>
<p>To reinforce the idea of tail recursion, let's revisit
the fibonacci function. What slowed down the old one so much
is that to find any nth number, you needed to find about 2<sup>n</sup>
other fibonacci numbers. If we accumulate the last two fibonacci numbers 
in the parameter list, we'll speed up the computation and get an optimized
loop so we can find larger fibonacci numbers.</p>

<p>You'll notice that as you increase n you start to get some weird results.
The int type we use here is exactly the same as the int you would use in your
C programs and, consequently, it is susceptible to integer overflow. This is a good
time and sit back and realize you are still working in an environment very
similar to C.</p>

<p>Of course, if you want to use arbitrary precision integers, there are lots
of libraries out there, and since ATS seamlessly wraps around C code, we can
use them fairly easily.</p>

<h3>Closures</h3>
<p>You'll notice we were able to access the value of n from inside the loop
function. This is a great example of a closure. Closures are simply expressions 
that are attached to an environment and may be applied to values. Applying
closures to values (i.e. a function call) yields a new value. In this example,
loop's environment consists of a value n, and we apply it to (0, 0, and 1). As loop
is defined, this evaluates to the nth fibonacci number. Closures are similar to lambda 
expressions, but lambdas do not have access to values defined outside
of the expression.</p>

<p>We identify functions as closures by adding &lt;cloref1&gt; to the colon before
specifying the function's return type. In ATS there are a few different types of 
closures, but at this point cloref1 will be the easiest to use.</p>

<h3>Exercise</h3>
<p>Rewrite the factorial function you wrote earlier using tail recursion.</p>
<div>
fun fib (n:int) : int = let
    fun loop (i:int, k1:int, k2:int)
         :&lt;cloref1&gt; int =
        if i < n  then
           loop(i+1,k2,k1+k2)
        else
           k1
    in loop(0, 0, 1) end

implement main () =
   println! ("f(40) = ",fib(40))
</div>
</div>

<div class="slide">
<h2>Big Integers in ATS</h2>
<p>Since we want to find the largest fibonacci number our machine
can handle, we need to use a special type of int. Luckily, the ATS
library has a pretty easy interface to the GMP library.</p>

<p>If you check out the compile options by going to the "Compile"
tab in the editor, you'll see that we've added a flag to compilation.
This is because we need to link the GMP library into our executable. If
you remove, it you'll see ld complain about missing symbols. For a
good overview on making and using C libraries,
<a href="http://users.actcom.co.il/~choo/lupg/tutorials/libraries/unix-c-libraries.html"
target="_blank">this article</a> is very helpful.</p>

<p>Note the _make and _free functions being called in this code. These
are wrappers around memory allocation and deallocation calls that manage
manage our large integers. You may not realize it, but
you're directly handling heap allocated memory from within ATS. In ATS,
when you deal with objects like this they take on what's called a
linear type. You don't need to know much about these now, but just for fun,
comment out one of the calls to intinf_free and see what happens.</p>

<p>You'll notice that the ATS compiler will not let you compile your code
because you have misused memory. In this case, you've preserved
memory when you were suppose to consume it, i.e. free it. If you don't
free k1 inside loop, then the pointer loses scope and we have no way
to access it and becomes a memory leak. In very few
languages can you get this level of safeguarding without incurring
runtime overheads in the executable.</p>

<h3>Exercise</h3>

<p>Write a function that finds the 12th prime Fibonacci number.</p>

<div data-compile_flags='["-lgmp"]'>
staload "libats/SATS/intinf.sats"
dynload "libats/DATS/intinf.dats"

fun fib (n:int) : Intinf = let
    fun loop
        (i:int, k1: Intinf, k2: Intinf)
         :&lt;cloref1&gt; Intinf =
        if i < n  then let
           val k3 = k1+k2
           val () = intinf_free(k1)
         in loop(i+1,k2,k3) end
        else let
           val () = intinf_free(k2)
        in k1 end
    val f0 = intinf_make(0)
    val f1 = intinf_make(1)
    in loop(0, f0, f1) end

implement main () = let
  val f = fib(1000)
  val () = println! ("f(1000) = ", f)
  val () = intinf_free(f)
  in end
</div>
</div>


<div class="slide">
<h2>Tuples</h2>
<p>ATS provides an easy way to group values together into
tuples. A tuple does not strictly need two elements, but can
contain any number needed. To access an element
inside a tuple just reference it via its position starting
with 0.</p>

<p>In this example, we make great use of pattern matching
on tuple types. This allow us to "unwrap" tuples and bind
their contents to variables.</p>

<p>Notice how we're able to pass as many objects to println as we
want. This is done by creating a tuple with an arbitrary number of
elements, and then applying the println function to that tuple.</p>

<h3>typedef</h3>
<p>The typedef declaration allows us to define equivalence between
two types. In this example, we say a point is equivalent to a tuple
consisting of two integers. This is done for convenience and good
practice.
</p>

<h3>Exercise</h3>
<p>Write a function that computes the 
<a href="http://en.wikipedia.org/wiki/Dot_product" 
target="_blank">dot product</a> of two
points.</p>

<div>
typedef point  = (int, int) //x and y coordinate

fun add
 (a: point, b: point) : point = 
     let 
          //access via pattern matching
          val (x0,y0) = a
          val (x1,y1) = b
     in
       (*
        Sometimes you'll see an @ in front
        of a tuple constructor, both
        methods are essentially the same.
        *)
       @(x0+x1, y0+y1)
     end 

fun sub
 (a: point, b: point) : point = 
    //access via index
    (a.0 - b.0, a.1 - b.1)

implement main () = let
     val a = (5, 2)
     val b = (2, 1)
     val sum = add(a, b)
     val (dx,dy) = sub(a, b)
     val () = println!
              ("a+b=(", sum.0, ", ", sum.1, ")")
     val () = println!
              ("a-b=(", dx, ", ", dy, ")")
   in end
</div>
</div>

<div class="slide">
<h2>Records</h2>
<p>When you want more organization to your structures,
you can use records to map labels to each field.</p>

<div>
typedef point = @{x=int,y=int}

fun 
  scale(a: point, s: int) : point = 
   @{x= a.x*s, y=a.y*s}

implement main () = let
    val pt = scale(@{x=3, y=4}, 4)
    val () = println!
        ("(3,4) x 4 = (", pt.x, ",", pt.y, ")")
  in end
</div>
</div>

<div class="slide">
<h2>Datatypes</h2>
<p>Datatypes are similar to unions in C. They allow us
to introduce some structure into our code that is far
more expressive than structs and records.</p>

<p>A datatype definition consists of a name for the type,
followed by a list of constructors that may be used to construct
that type. You can think of each constructor as defining a
new state or instance in which a type may be.</p>

<p>Most functions we write have the possibility for an error to occur.
In an imperative language, we may return false, -1, or a NULL pointer upon
error. In a strictly typed environment, we can leverage the type system
to do the error reporting for us, as this example shows.</p>

<p>Try entering different numbers into the runtime arguments for this
example and see how the program behaves.</p>

<h3>case</h3>
<p>This is the first time we present the incredibly useful
case construct. With case, we can do pattern matching on datatypes
in order to "unrwrap" them, just as we did with Tuples and val statements.</p>

<p>There are several options we can pass a case statement. Here, we added a +
sign to case to tell the compiler to throw an error if we do not do exhaustive
pattern matching on Option. This means that if there is a constructor that we
do not provide a pattern for, our code will not pass typechecking. Without a +,
only a warning will be given. To suppress this warning, you can put a - sign
in front of the case, but do so with caution.</p>
<div>
datatype Option (a:t@ype) =
 | Some (a) of (a)
 | None (a)

fun get_flag (s: string) : Option (int) = let
      val n = int_of_string(s)
    in 
     if n > 5 then
       None()
     else
       Some(n)
    end

implement main (argc, argv) =
     if argc < 2 then
        println! "Please give a number"
     else let
        val str = argv.[1]
        val flg = get_flag(str)
      in
        case+ flg of
         | None () =>
                println! "Invalid option!"
         | Some (n) =>
                println! ("Running option ", n)
      end
</div>
</div>

<div class="slide">
<h2>Recursive Datatypes</h2>
<p>Datatypes can also be recursive. A good example
of this is a
<a href="http://en.wikipedia.org/wiki/Binary_search_tree"
   target="_blank">binary search tree.</a></p>
<h3>Exercise</h3>
<p>Implement equal_values, which checks to see if two
trees contain the same order of elements. Note, they could 
have different structures, but still have the same elements.</p>
<div>
datatype Tree =
  | Node of (int, Tree, Tree)
  | Leaf of ()

extern
fun insert(t: Tree, i: int) : Tree

extern
fun equal_structure (a: Tree, b: Tree) : bool

extern 
fun equal_values (a: Tree, b: Tree) : bool

implement
equal_structure (a, b) =
   case+ a of 
   | Node (_, al, ar) =>
     (case+ b of
       | Node (_, bl, br) => let
          val eqleft  = 
              equal_structure(al, bl)
          val eqright = 
              equal_structure(ar, br)
          in eqleft && eqright end
       | Leaf () => false
     )
   | Leaf () =>
     (case+ b of
       | Node (_, _, _) => false
       | Leaf () => true
     )
</div>
</div>