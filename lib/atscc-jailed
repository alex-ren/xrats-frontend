#!/usr/bin/perl -wT

# Notes on chroot setup
# apt-get install dchroot debootstrap
# mkdir /opt/atscc-jail
#
# Add the following to /etc/schroot.conf
#  [natty]
#  description=Ubuntu Natty
#  location=/opt/atscc-jail
#  priority=3
#  users=atscc
#  groups=sbuild
#  root-groups=root
# 
# sudo debootstrap --variant=buildd --arch i386 natty /opt/atscc-jail http://mirror.anl.gov/pub/ubuntu/
# cp -r /opt/ats-0.2.7 /opt/atscc-jail/opt/ats-0.2.7
# cp -r /opt/postiats /opt/atscc-jail/opt/postiats
# cp lib/safe-exec /opt/atscc-jail/opt/

use POSIX;
use BSD::Resource;
use String::Random;
use IO::Handle;
use Getopt::Long;

$chroot_jail = "/opt/atscc-jail";

setrlimit(RLIMIT_CPU,1,2);
setrlimit(RLIMIT_CORE,0,0);
setrlimit(RLIMIT_LOCKS,0,0);
setrlimit(RLIMIT_NOFILE,25,25);
setrlimit(RLIMIT_OFILE,25,25);
setrlimit(RLIMIT_OPEN_MAX,25,25);
setrlimit(RLIMIT_FSIZE,100000,150000);

setpriority(PRIO_PROCESS,PRIO_MAX);

($_,$_,$uid,$gid) = getpwnam("nobody")
    or die "failed getting user nobody";

if($gid == 0 || $uid == 0) { #Oh my god, how did you become root?!
    die "gid and uid not set";
}

#Put the process in jail and drop permissions.
chdir($chroot_jail);
chroot($chroot_jail);
$< = $uid;
$> = $uid;
$( = $gid;
$) = $gid;

sub file_of_stdin {
    local($filename) = ($_[0]);
    open(SOURCE,"+>","/tmp/".$filename) 
	or die "Cannot create tmp file";
    while($line = <STDIN>) {
        print SOURCE $line;
    }
    close(SOURCE);
}

sub random_string {
    $rand = new String::Random;
    return $rand->randpattern("CnccCcCCncnCcnncCcnCnCcCnCnC");
}

# fork and exec a command, only displaying errors if it exits with 
# a non-zero status.
sub fork_and_exec {
    local($cmd) = ($_[0]);
    pipe CCRD, CCWR;
    
    $pid = fork();
    die "Couldn't fork" unless defined $pid;
    
    if ( $pid > 0 ) {
        close(CCWR);
        wait();
    } else {
        close(CCRD);
        open(STDERR,">&CCWR");
        open(STDOUT,">","/dev/null");
        exec $cmd or die "Couldn't run compiler..";
    }
    $success = !$?;

    if(!$success) {
        print "Error:\n";
        while($line = <CCRD>) {
            print $line;
        }
    }
    return $success;
}

sub compile_ats {
    local($options) = ($_[0]);
    $filename = random_string();
    file_of_stdin($filename.".dats");
    @files = ("$filename.dats", $filename."_dats.c", $filename);
    $ENV{'ATSHOME'} = "/opt/ats-0.2.7";
    chdir("/tmp"); #ATS needs to generate code in the pwd.
    $compile_cmd = $options->{"path"}." ".$options->{"flags"}." -o /tmp/$filename /tmp/$filename.dats";

    $success = fork_and_exec($compile_cmd);

    if($success) {
        if($options->{"typecheck"}) {
            print "Your code has been successfully typechecked!\n";
        } else {
            #Make sure we can't write to these files.
            chmod 0555, @files;
            setrlimit(RLIMIT_STACK,1048576,1048576);
            setrlimit(RLIMIT_VMEM,2048576,2048576);
            system "/opt/safe-exec /tmp/$filename";
            chdir("/tmp");
            chmod 0755, @files;
        }
    }
    return @files;
}

sub compile_patsopt {
    local($options) = ($_[0]);
    $filename = random_string();
    file_of_stdin($filename.".dats");
    $ENV{'PATSHOME'} = "/opt/postiats";
    $compile_cmd = $options->{"path"}." ".$options->{"flags"}." --dynamic /tmp/$filename.dats";
    if( fork_and_exec($compile_cmd) ) {
	print "Your code has been successfully typechecked!";
    }
    return ($filename);
}

%compilers = ("ats"=>
              {"options"=>
               {"path"=>"/opt/ats-0.2.7/bin/atscc","flags"=>""}
               ,"compile"=>\&compile_ats
              },
              "patsopt"=>
              {"options"=>
              {"path"=>"/opt/postiats/bin/patsopt","flags"=>""}
              ,"compile"=>\&compile_patsopt
              });

$compiler_selected="";
$typecheck="";

GetOptions('tc'=>\$typecheck, 'compiler=s'=>\$compiler_selected);

die "Invalid compiler given" unless $compiler = $compilers{$compiler_selected};

$options = $compiler->{"options"};

if($typecheck) {
    $options->{"flags"} .= " -tc";
    $options->{"typecheck"} = 1;
}

$ENV{'PATH'} = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin";

@files = $compiler->{"compile"}->($options);

chdir("/tmp");

unlink @files;

exit(0);
